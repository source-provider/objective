#include <roblox/exploit/environment/environment.h>
#include <roblox/exploit/classes/bytecode/bytecode.h>
#include <roblox/exploit/classes/yield/yield.h>
#include <dependencies/luau/vm/src/lstate.h>
#include <dependencies/luau/vm/src/lapi.h>
#include <dependencies/luau/vm/src/lgc.h>
#include <lualib.h>

auto storage{ module::storage::getSingleton() };

auto mouse1click(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mouse1press(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mouse1release(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mouse2click(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mouse2press(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mouse2release(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mousemoveabs(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mousemoverel(lua_State* L) -> std::intptr_t {
	return 0;
}

auto mousescroll(lua_State* L) -> std::intptr_t {
	return 0;
}

auto keypress(lua_State* L) -> std::intptr_t {
	return 0;
}

auto keyrelease(lua_State* L) -> std::intptr_t {
	return 0;
}

auto isrbxactive(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 0, 0);

	lua_pushboolean(L, (GetForegroundWindow() == storage->find<HWND>(obfuscate_str("windowHandle"))));
	return 1;
}

/* registering */
static const luaL_Reg envFuncs[] = {
	{"mouse1click", mouse1click},
	{"mouse1press", mouse1press},
	{"mouse1release", mouse1release},

	{"mouse2click", mouse2click},
	{"mouse2press", mouse2press},
	{"mouse2release", mouse2release},

	{"mousemoveabs", mousemoveabs},
	{"mousemoverel", mousemoverel},
	{"mousescroll", mousescroll},

	{"keypress", keypress},
	{"keyrelease", keyrelease},

	{"isrbxactive", isrbxactive},
	{"isgameactive", isrbxactive},
	{"iswindowactive", isrbxactive},
	{NULL, NULL}
};

auto module::environment::createInput(lua_State* L) -> void {
	lua_pushvalue(L, LUA_GLOBALSINDEX);
	luaL_register(L, NULL, envFuncs);
	lua_pop(L, 1);
}