#include <roblox/exploit/environment/environment.h>
#include <roblox/exploit/classes/bytecode/bytecode.h>
#include <roblox/exploit/classes/yield/yield.h>
#include <dependencies/luau/vm/src/lstate.h>
#include <dependencies/luau/vm/src/lapi.h>
#include <dependencies/luau/vm/src/lgc.h>
#include <lualib.h>

auto rconsoleprint(lua_State* L) -> int {
	luaL_stackcheck(L, 1, 1, luaL_checktype(L, 1, LUA_TSTRING););
	return 0;
}

auto rconsoleinfo(lua_State* L) -> int {
	luaL_stackcheck(L, 1, 1, luaL_checktype(L, 1, LUA_TSTRING););
	return 0;
}

auto rconsolewarn(lua_State* L) -> int {
	luaL_stackcheck(L, 1, 1, luaL_checktype(L, 1, LUA_TSTRING););
	return 0;
}

auto rconsoleerror(lua_State* L) -> int {
	luaL_stackcheck(L, 1, 1, luaL_checktype(L, 1, LUA_TSTRING););
	return 0;
}

auto rconsoleclear(lua_State* L) -> int {
	luaL_stackcheck(L, 0, 0);
	return 0;
}

auto rconsolename(lua_State* L) -> int {
	luaL_stackcheck(L, 1, 1, luaL_checktype(L, 1, LUA_TSTRING););
	return 0;
}

auto rconsolecreate(lua_State* L) -> int {
	luaL_stackcheck(L, 0, 0);
	return 0;
}

auto rconsoledestroy(lua_State* L) -> int {
	luaL_stackcheck(L, 0, 0);
	return 0;
}

auto rconsoleinput(lua_State* L) -> int {
	luaL_stackcheck(L, 0, 0);
	lua_pushstring(L, "");
	return 1;
}

/* registering */
static const luaL_Reg envFuncs[] = {
	{"rconsoleprint", rconsoleprint},
	{"rconsoleinfo", rconsoleinfo},
	{"rconsolewarn", rconsolewarn},
	{"rconsoleerr", rconsoleerror},
	{"rconsoleclear", rconsoleclear},

	{"consoleprint", rconsoleprint},
	{"consoleinfo", rconsoleinfo},
	{"consolewarn", rconsolewarn},
	{"consoleerr", rconsoleerror},
	{"consoleclear", rconsoleclear},

	{"rconsolename", rconsolename},
	{"consolesettitle", rconsolename},
	{"rconsolesettitle", rconsolename},

	{"rconsoleinput", rconsoleinput},
	{"consoleinput", rconsoleinput},

	{"rconsolecreate", rconsolecreate},
	{"consolecreate", rconsolecreate},
	{"rconsoledestroy", rconsoledestroy},
	{"consoledestroy", rconsoledestroy},
	{NULL, NULL}
};

auto module::environment::createConsole(lua_State* L) -> void {
	lua_pushvalue(L, LUA_GLOBALSINDEX);
	luaL_register(L, NULL, envFuncs);
	lua_pop(L, 1);
}