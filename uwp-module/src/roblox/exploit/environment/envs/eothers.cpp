#include <roblox/exploit/environment/environment.h>
#include <roblox/exploit/classes/bytecode/bytecode.h>
#include <roblox/exploit/classes/yield/yield.h>
#include <dependencies/luau/vm/src/lstate.h>
#include <dependencies/luau/vm/src/lapi.h>
#include <dependencies/luau/vm/src/lgc.h>
#include <lualib.h>
#include <lz4/lz4.h>

auto identifyexecutor(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 0, 0);
	lua_pushstring(L, obfuscate_str(cExploitName));
	lua_pushstring(L, obfuscate_str(cExploitVersion));
	return 2;
}

auto lz4compress(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 1, 1, checkType(L, 1, LUA_TSTRING));
	const char* data = lua_tostring(L, 1);
	int nMaxCompressedSize = LZ4_compressBound(strlen(data));
	char* out_buffer = new char[nMaxCompressedSize];

	LZ4_compress(data, out_buffer, strlen(data));
	lua_pushlstring(L, out_buffer, nMaxCompressedSize);
	return 1;
}

auto lz4decompress(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 2, 2, checkType(L, 1, LUA_TSTRING));
	checkType(L, 2, LUA_TNUMBER);
	const char* data = lua_tostring(L, 1);
	int data_size = lua_tointeger(L, 2);

	char* pszUnCompressedFile = new char[data_size];

	LZ4_uncompress(data, pszUnCompressedFile, data_size);
	lua_pushlstring(L, pszUnCompressedFile, data_size);
	return 1;
}

auto setclipboard(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 0, 0);
	return 0;
}

auto setfpscap(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 1, 1, checkType(L, 1, LUA_TNUMBER));
	double fps = lua_tonumber(L, 1);

	if (fps <= 0) {
		fps = 1000;
	}

	module::scheduler::getSingleton()->setFps(abs(fps));
	return 0;
}

auto getfpscap(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 0, 0);
	lua_pushnumber(L, module::scheduler::getSingleton()->getFps());
	return 1;
}

auto messagebox(lua_State* L) -> std::intptr_t {
	luaL_stackcheck(L, 0, 0);
	return 0;
}

/* registering */
static const luaL_Reg envFuncs[] = {
	{"identifyexecutor", identifyexecutor},
	{"getexecutorname", identifyexecutor},

	{"lz4compress", lz4compress},
	{"lz4decompress", lz4decompress},

	{"setclipboard", setclipboard},
	{"toclipboard", setclipboard},

	{"setfpscap", setfpscap},
	{"getfpscap", getfpscap},
	{"setfps", setfpscap},
	{"getfps", getfpscap},
	{"set_fps_cap", setfpscap},
	{"get_fps_cap", getfpscap},
	{"set_fps", setfpscap},
	{"get_fps", getfpscap},

	{"messagebox", messagebox},
	{"messageboxasync", messagebox},

	{NULL, NULL}
};

auto module::environment::createOthers(lua_State* L) -> void {
	lua_pushvalue(L, LUA_GLOBALSINDEX);
	luaL_register(L, NULL, envFuncs);
	lua_pop(L, 1);
}