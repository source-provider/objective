#pragma once
#include <roblox/exploit/execution/execution.h>
#include <roblox/exploit/classes/render/render.h>
#include <filesystem>

#define registerFunction(L, name, func) lua_pushcclosurek(L, func, obfuscate_str(name), NULL, NULL); lua_setglobal(L, obfuscate_str(name))
#define registerMemberFunction(L, name, func) lua_pushcclosurek(L, func, obfuscate_str(name), NULL, NULL); lua_setfield(L, -2, obfuscate_str(name))
#define registerExistingMember(L, global, index) lua_getglobal(L, global); lua_getfield(L, -1, index); lua_setfield(L, -3, index); lua_pop(L, 1)

static auto getDirectory() -> std::filesystem::path {
	std::filesystem::path workspaceFolder = std::filesystem::path(getenv("localappdata")) / "Workspace";

	if (!std::filesystem::exists(workspaceFolder))
		std::filesystem::create_directory(workspaceFolder);

	return workspaceFolder;
}

extern auto mainThread(HMODULE hModule) -> void;
namespace module {
	class environment {
	private:
		static environment* singleton;
	private:
		/* regular */
		auto createEnv(lua_State* L) -> void;
		auto createClosure(lua_State* L) -> void;
		auto createConsole(lua_State* L) -> void;
		auto createFileSystem(lua_State* L) -> void;
		auto createInput(lua_State* L) -> void;
		auto createMetatable(lua_State* L) -> void;
		auto createHttp(lua_State* L) -> void;
		auto createOthers(lua_State* L) -> void;

		/* libraries */
		auto createCache(lua_State* L) -> void;
		auto createDebug(lua_State* L) -> void;
		auto createDrawing(lua_State* L) -> void;
		auto createCrypt(lua_State* L) -> void;
		auto createWebSockets(lua_State* L) -> void;
		auto createObjective(lua_State* L) -> void;

		/* After register */
		auto createInit(lua_State* L) -> void;
	public: // custom functions
		static auto getobjects(lua_State* L) -> std::intptr_t;
		static auto httpget(lua_State* L) -> std::intptr_t; 
		static auto httppost(lua_State* L) -> std::intptr_t;
	public:
		static auto getSingleton() -> environment*;
		auto createEnvironment(lua_State* L) -> void;

		auto getClassName(lua_State* L, std::intptr_t index) -> const char*;
		auto checkClassName(lua_State* L, std::intptr_t index, const char* className) -> void;
	};

	/*namespace global {
		const auto environment{ module::environment::getSingleton() };
		const auto execution{ module::execution::getSingleton() };
		const auto scheduler{ module::scheduler::getSingleton() };
		const auto storage{ module::storage::getSingleton() };
		const auto console{ module::console::getSingleton() };
	}*/
}