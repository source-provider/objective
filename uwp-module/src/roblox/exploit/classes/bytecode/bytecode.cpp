#include "bytecode.h"
#include <Luau/BytecodeBuilder.h>
#include <Luau/Compiler.h>
#include <zstd/zstd.h>
#include <zstd/xxhash.h>


namespace module {
	luauBytecode* luauBytecode::singleton{ nullptr };
	auto luauBytecode::getSingleton() -> luauBytecode* {
		if (singleton == nullptr)
			singleton = new luauBytecode();

		return singleton;
	};

	auto luauBytecode::compressBytecode(std::string bytecode) -> std::string {
		std::string output = "RSB1";

		std::size_t dataSize = bytecode.size();
		std::size_t maxSize = ZSTD_compressBound(dataSize);

		std::vector<char> compressed(maxSize);
		std::size_t compSize = ZSTD_compress(&compressed[0], maxSize, bytecode.c_str(), dataSize, ZSTD_maxCLevel());

		output.append(reinterpret_cast<char*>(&dataSize), sizeof(dataSize));
		output.append(&compressed[0], compSize);

		std::uint32_t firstHash = XXH32(&output[0], output.size(), 42U);
		std::uint8_t hashedBytes[4];
		std::memcpy(hashedBytes, &firstHash, sizeof(firstHash));

		for (std::size_t i = 0; i < output.size(); ++i)
			output[i] ^= hashedBytes[i % 4] + i * 41U;

		return output;
	};

	auto luauBytecode::decompressBytecode(std::string bytecode) -> std::string {
		const char bytecodeMagic[] = "RSB1";

		uint8_t hashBytes[4];
		memcpy(hashBytes, &bytecode[0], 4);

		for (auto i = 0u; i < 4; ++i) {
			hashBytes[i] ^= bytecodeMagic[i];
			hashBytes[i] -= i * 41;
		}

		for (size_t i = 0; i < bytecode.size(); ++i) {
			bytecode[i] ^= hashBytes[i % 4] + i * 41;
		}

		XXH32(&bytecode[0], bytecode.size(), 42);

		uint32_t dataSize;
		memcpy(&dataSize, &bytecode[4], 4);

		std::vector<uint8_t> output(dataSize);
		ZSTD_decompress(&output[0], dataSize, &bytecode[8], bytecode.size() - 8);

		return std::string((char*)(&output[0]), dataSize);
	};

	auto luauBytecode::compileBytecode(std::string luaCode) -> std::string {
		struct : Luau::BytecodeEncoder {
			auto encodeOp(const std::uint8_t op) -> uint8_t override {
				return op * 227;
			}
		} bytecodeEncoder;

		return Luau::compile(luaCode, {}, {}, &bytecodeEncoder);
	};

	auto luauBytecode::compileAndCompress(std::string luaCode) -> std::string {
		std::string compiledBytecode = this->compileBytecode(luaCode);
		if (compiledBytecode[0] == 0) {
			return compiledBytecode;
		}

		return this->compressBytecode(compiledBytecode);
	};
}